CREATE OR REPLACE PROCEDURE RETURN1(ID IN INT,JOB OUT VARCHAR2,SAL OUT INT)
  2  AS
  3     BEGIN
  4             SELECT JOB INTO JOB FROM EMP WHERE EMPNO=ID;
  5             SELECT SAL INTO SAL FROM EMP WHERE EMPNO=ID;
  6     END;
  7  /

Procedure created.

SQL> DECLARE
  2  A VARCHAR2(20);
  3  B INT;
  4  BEGIN
  5     RETURN1(7900,A,B);
  6     DBMS_OUTPUT.PUT_LINE('JOB='||A);
  7     DBMS_OUTPUT.PUT_LINE('SAL='||B);
  8  END;
  9  /

=====================================
GLOBAL VARIABLE/BIND VARIABLES:-

CREATE OR REPLACE PROCEDURE FORMATPHONE(PPHONE IN OUT VARCHAR2)
  2  AS
  3     BEGIN
  4             PPHONE:='('||SUBSTR(PPHONE,1,3)||')'||SUBSTR(PPHONE,4,3)||'-'||SUBSTR(PPHONE,7);
  5  END;
  6   /

Procedure created.

SQL> VARIABLE GPHONE VARCHAR2(25);
SQL> DECLARE
  2  BEGIN
  3     :GPHONE :='07922818667';
  4  END;
  5  /

PL/SQL procedure successfully completed.

SQL> EXEC FORMATPHONE(:GPHONE);

PL/SQL procedure successfully completed.

SQL> PRINT :GPHONE;

GPHONE
--------------------------------
(079)228-18667

===========================================
CASE METHOD 1

SELECT SAL,CASE SAL WHEN 800 THEN SAL+100
  2  WHEN 1000 THEN SAL+200
  3  ELSE SAL+300 END DATA FROM EMP;


METHOD 2

SELECT SAL,CASE WHEN JOB='CLERK' THEN SAL+(SAL*0.5)
  2  WHEN JOB='SALESMAN' THEN SAL+(SAL*0.7)
  3  END "BONUS" FROM EMP;

METHOD 3

SELECT SAL,CASE WHEN SAL>800 THEN SAL*.20
  2  WHEN SAL>1000 THEN SAL*.50 END DATA FROM EMP;




===================================
CURSORS

CREATE OR REPLACE PROCEDURE TR14(JD VARCHAR2)
  2  AS
  3  BEGIN
  4     UPDATE EMP SET SAL=SAL+100 WHERE JOB=JD;
  5     DBMS_OUTPUT.PUT_LINE('NO='||SQL%ROWCOUNT);
  6  END;
  7  /



EXPLICIT CURSOR



 CREATE OR REPLACE PROCEDURE TR141(DN INT)
    AS
       CURSOR CR_EMP IS SELECT ROWNUM,A.DEPTNO,DNAME,LOC,ENAME,SAL,JOB,COMM FROM EMP A JOIN DEPT B ON A.DEPTNO=B.DEPTNO WHERE A.DEPTNO=DN;
       INFO CR_EMP%ROWTYPE;
       BEGIN
               OPEN CR_EMP;
		FETCH CR_EMP INTO INFO;
               DBMS_OUTPUT.PUT_LINE('DEPTNO'||':'||INFO.DEPTNO);
              DBMS_OUTPUT.PUT_LINE('DNAME'||':'||INFO.DNAME);
              DBMS_OUTPUT.PUT_LINE('LOC'||':'||INFO.LOC);
              DBMS_OUTPUT.PUT_LINE('=============================================================');
              DBMS_OUTPUT.PUT_LINE('SR. NO.'||CHR(9)||'ENAME'||CHR(9)||'SAL'||CHR(9)||'JOB'||CHR(9)||CHR(9)||'COMM');
               DBMS_OUTPUT.PUT_LINE('============================================================');
              LOOP
              
                       DBMS_OUTPUT.PUT_LINE(INFO.ROWNUM||CHR(9)||INFO.ENAME||CHR(9)||INFO.SAL||CHR(9)||INFO.JOB||CHR(9)||INFO.COMM);
              		FETCH CR_EMP INTO INFO;
			EXIT WHEN CR_EMP%NOTFOUND;
		END LOOP;
              CLOSE CR_EMP;
   END;
   /


===================================================
CREATE TABLE NEW1 AS SELECT * FROM EMP WHERE SAL>1000 AND (JOB='CLERK' OR JOB='MANAGER'); 
CREATE OR REPLACE PROCEDURE TR142
    AS
       CURSOR CR_EMP IS SELECT * FROM EMP WHERE SAL>1000 AND (JOB='CLERK' OR JOB='MANAGER');
       INFO CR_EMP%ROWTYPE;
       
	BEGIN
               
	       OPEN CR_EMP;
               FETCH CR_EMP INTO INFO;
               UPDATE NEW1
               SET SAL=SAL+(SAL*0.15)
               WHERE INFO.JOB='CLERK';
               UPDATE NEW1
               SET SAL=SAL+(SAL*0.2)
               WHERE INFO.JOB='MANAGER';
	       CLOSE CR_EMP;
         END;
  /


======================================================
DEPARTMENT WISE:-

CREATE OR REPLACE PROCEDURE PQR AS
    CURSOR C_GEN IS SELECT * FROM DEPT;
    CURSOR C_DEPT (D_NO1 NUMBER) IS SELECT * FROM EMP WHERE DEPTNO=D_NO1;
    INFO1 C_GEN%ROWTYPE;
    INFO2 C_DEPT%ROWTYPE;
    BEGIN
    OPEN C_GEN;  
	LOOP    
        FETCH C_GEN INTO INFO1;
        EXIT WHEN C_GEN%NOTFOUND;   

	OPEN C_DEPT(INFO1.DEPTNO);
               LOOP
                       FETCH C_DEPT INTO INFO2;
              		EXIT WHEN C_DEPT%NOTFOUND;
   			DBMS_OUTPUT.PUT_LINE (INFO1.DEPTNO||' '||INFO2.EMPNO||' '||INFO2.ENAME);
                      
		END LOOP;
   
        CLOSE C_DEPT;
  
	END LOOP;
  
    CLOSE C_GEN;  
   END;
    /

==========================================================
REF CURSOR:-

DECLARE
     CURSOR C_DEPT IS SELECT DNAME FROM DEPT;
     INFO C_DEPT%ROWTYPE;
     BEGIN
     OPEN C_DEPT;
     LOOP
	FETCH C_DEPT INTO INFO;
	EXIT WHEN C_DEPT%NOTFOUND;
        TYPE REFT1 IS REF CURSOR RETURN INFO;
        EDATA REFT1;
        DATAHOLD EMP%ROWTYPE;
        
        OPEN EDATA FOR SELECT * FROM EMP WHERE JOB='CLERK' ;
                LOOP
                        FETCH EDATA INTO DATAHOLD;
                        
			EXIT WHEN EDATA%NOTFOUND;
                        DBMS_OUTPUT.PUT_LINE(DATAHOLD.DEPTNO||' '||DATAHOLD.EMPNO||' '||DATAHOLD.ENAME||' '||DATAHOLD.SAL||' '||INFO.DNAME);
                END LOOP;
        CLOSE EDATA;
	END LOOP;
	CLOSE C_DEPT;
     END;
     /

==========================================================
EXCEPTION HANDLING:-

CREATE OR REPLACE PROCEDURE EXCEPTION_HANDLING(A INT)
  2  AS
  3     NAME VARCHAR2(20);
  4     BEGIN
  5             SELECT ENAME INTO NAME FROM EMP WHERE EMPNO=A;
  6             DBMS_OUTPUT.PUT_LINE('NAME='||NAME);
  7             EXCEPTION
  8                     WHEN NO_DATA_FOUND THEN
  9                             DBMS_OUTPUT.PUT_LINE('RECORD NOT FOUND');
 10                     WHEN TOO_MANY_ROWS THEN
 11                             DBMS_OUTPUT.PUT_LINE('MORE THAN ONE ROW');
 12                     WHEN OTHERS THEN
 13                             DBMS_OUTPUT.PUT_LINE('SOME OTHER ERROR');
 14     END;
 15  /


USER DEFINED:-

 DECLARE
  2  INVALID_AGE EXCEPTION;
  3  VID INT;
  4  BEGIN
  5  VID:=&UID;
  6  IF(VID<18) THEN
  7  RAISE INVALID_AGE;
  8  ELSE
  9  DBMS_OUTPUT.PUT_LINE('AGE='||VID);
 10  END IF;
 11  EXCEPTION WHEN INVALID_AGE THEN
 12  DBMS_OUTPUT.PUT_LINE('AGE NOT CORRECT');
 13  END;
 14  /
===============================================
ASSIGNMENT DAY 3 (1):-

CREATE OR REPLACE PROCEDURE MESS(A INT)
AS
ONLY_ONE EXCEPTION;
NAME VARCHAR2(20);
COUNTING INT;
BEGIN
	SELECT ENAME INTO NAME FROM EMP WHERE SAL=A;
	DBMS_OUTPUT.PUT_LINE('ENAME='||NAME);
	SELECT COUNT(ENAME) INTO COUNTING FROM EMP WHERE SAL=A;
	IF(COUNTING=1) THEN
		RAISE ONLY_ONE;
	END IF;
	EXCEPTION
	WHEN TOO_MANY_ROWS THEN
		INSERT INTO MESSAGES VALUES('MORE THAN ONE EMPLOYEE WITH SALARY='||A);
	WHEN NO_DATA_FOUND THEN
		INSERT INTO MESSAGES VALUES('NO EMPLOYEE WITH SALARY='||A);
	WHEN ONLY_ONE THEN
		INSERT INTO MESSAGES VALUES ('ENAME='||NAME);
	WHEN OTHERS THEN
		INSERT INTO MESSAGES VALUES ('SOME OTHER ERROR');
END;
/

===================================================
ASSIGNMENT DAY 3 (4):-

CREATE OR REPLACE PROCEDURE EMPL(EMPLNO1 INT,EMPLNO2 INT)
AS
EMPINFO1 INT;
EMPINFO2 INT;
NOT_IN1 EXCEPTION;
NOT_IN2 EXCEPTION;
BEGIN
	SELECT COUNT(EMPNO) INTO EMPINFO1 FROM EMP12 WHERE EMPNO=EMPLNO1 ;
	SELECT COUNT(EMPNO) INTO EMPINFO2 FROM EMP12 WHERE EMPNO=EMPLNO2 ;
	IF (EMPINFO1=1) THEN
		UPDATE EMP12
		SET SAL=SAL+(SAL*0.1)
		WHERE EMPINFO1=1;
	END IF;
	
	IF (EMPINFO2=1) THEN
		UPDATE EMP12
		SET SAL=SAL+(SAL*0.2)
		WHERE EMPINFO2=1;
	END IF;
	
	IF (EMPINFO1=0 AND EMPINFO2=1) THEN
		UPDATE EMP12
		SET SAL=SAL+(SAL*0.2)
		WHERE EMPINFO2=1;
		RAISE NOT_IN1;
	END IF;
	
	IF (EMPINFO2=0 AND EMPINFO1=1) THEN
		UPDATE EMP12
		SET SAL=SAL+(SAL*0.1)
		WHERE EMPINFO1=1;
		RAISE NOT_IN2;
	END IF;
	
	EXCEPTION
	WHEN NOT_IN1 THEN
		DBMS_OUTPUT.PUT_LINE('1ST NOT PRESENT');
	WHEN NOT_IN2 THEN
		DBMS_OUTPUT.PUT_LINE('2ND NOT PRESENT');
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('BOTH NOT PRESENT');
END;
/	

==============================================================
FUNCTION:-
 CREATE OR REPLACE FUNCTION FUNC_EX(A INT)
  2  RETURN INT
  3  AS
  4  BEGIN
  5     DBMS_OUTPUT.PUT_LINE('MY FIRST FUNCTION!!!');
  6     RETURN A*A;
  7  END;
  8  /

TO EXEC:-
EXEC DBMS_OUTPUT.PUT_LINE(FUNC_EX(8));
		OR
DECLARE
  2  ANS INT;
  3  BEGIN
  4     ANS:=FUNC_EX(8);
  5     DBMS_OUTPUT.PUT_LINE(ANS);
  6  END;
  7  /


CREATE OR REPLACE FUNCTION FUNC_EX(A INT)
    RETURN VARCHAR2
    AS
    NAME VARCHAR2(20);
    BEGIN
       SELECT ENAME INTO NAME FROM EMP WHERE EMPNO=A;
       RETURN NAME;
    END;
    /

EXEC DBMS_OUTPUT.PUT_LINE(FUNC_EX(7788));

 CREATE OR REPLACE FUNCTION TAX(PVAL NUMBER)
    RETURN NUMBER
    AS
    BEGIN
       RETURN(PVAL*0.05);
    END;
    /

EXEC DBMS_OUTPUT.PUT_LINE(TAX(1000));


SELECT EMPNO,ENAME,SAL,TAX(SAL) FROM EMP ORDER BY TAX(SAL);


 SELECT EMPNO,ENAME,SAL,TAX(SAL) FROM EMP WHERE TAX(SAL)=150;


INSERT INTO EMP(EMPNO,ENAME,MGR,DEPTNO,SAL) VALUES (4545,'JACK',7900,10,TAX(90000));	


CREATE OR REPLACE FUNCTION FUNC_EX(A INT)
    RETURN VARCHAR2
    AS
    NAME VARCHAR2(20);
    BEGIN
       SELECT ENAME INTO NAME FROM EMP WHERE EMPNO=A;
       RETURN NAME;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
		RETURN -1;
    END;
    /



******CREATE OR REPLACE PROCEDURE TAXPAY
    AS
	
    CURSOR C_EMP IS SELECT EMPNO,ENAME,SAL,TAX(SAL) FROM EMP ;
    TDATA C_EMP%ROWTYPE;
    BEGIN
	LOOP
	FETCH C_EMP INTO TDATA;
	EXIT WHEN C_EMP%NOTFOUND;
       	DBMS_OUTPUT.PUT_LINE(TDATA.EMPNO||' '||TDATA.ENAME||' '||TDATA.SAL||' '||TDATA.TAX(SAL));
	END LOOP;
	
    END;
    /


====================================================
ASSIGNMENT DAY 4-2
CREATE OR REPLACE FUNCTION U_A_C(ENO INT,SAL INT,COMM INT)
    RETURN INT
    AS
    AC INT;
    BEGIN
    AC:=(SAL+COMM)*12;
    
    IF (SAL IS NULL AND COMM IS NOT NULL) THEN
   AC:=COMM*12;
   DBMS_OUTPUT.PUT_LINE('SAL NULL');
   END IF;
   IF (SAL IS NOT NULL AND COMM IS NULL) THEN
   AC:=SAL*12;
   DBMS_OUTPUT.PUT_LINE('COMM NULL');
   END IF;
RETURN AC;
   END;
   /

 SELECT EMPNO,SAL,COMM,U_A_C(EMPNO,NVL(SAL,0),NVL(COMM,0)) FROM EMP;


======================================================
RETURNING BOOLEAN:-

CREATE OR REPLACE FUNCTION CHK_DATA(A INT)
RETURN BOOLEAN
AS
	CURSOR COLL IS SELECT COUNT(EMPNO)FROM EMP WHERE DEPTNO=DENO ;
	CNT INT;
	BEGIN
		SELECT COUNT(EMPNO) INTO CNT FROM EMP WHERE EMPNO=A;
		IF CNT>0 THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			RETURN FALSE;
		WHEN OTHERS THEN
			RETURN FALSE;
	END;
 
CAN BE DONE ONLY WITH:-
 DECLARE
  2  ANS BOOLEAN;
  3  BEGIN
  4     ANS:=CHK_DATA(7788);
  5     IF ANS=TRUE THEN
  6             DBMS_OUTPUT.PUT_LINE('RECORD EXISTS');
  7     ELSE
  8             DBMS_OUTPUT.PUT_LINE('RECORD DOESNT EXISTS');
  9     END IF;
 10  END;
 11  /

==========================================================
ASSIGNMENT DAY 4-3:-

CREATE OR REPLACE FUNCTION U_V_D(DNO INT)
RETURN BOOLEAN
AS
	NAME VARCHAR2(20);
	CONT INT;
	CNT INT;
	BEGIN
		
		SELECT COUNT(DEPTNO) INTO CNT FROM DEPT WHERE DEPTNO=DNO;
		IF CNT>=1 THEN
				
			
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('NO DATA');
			RETURN FALSE;
		WHEN OTHERS THEN
			RETURN FALSE;
		
		
	END;


CREATE OR REPLACE PROCEDURE S_S(DENO INT)
AS
	
	ANS BOOLEAN;
	CONT INT;
	
	BEGIN	
		
			
		ANS:=U_V_D(DENO);
		IF ANS THEN
			SELECT COUNT(DEPTNO) INTO CONT FROM EMP WHERE DEPTNO=DENO ;
			DBMS_OUTPUT.PUT_LINE('THEN COUNT IS '||CONT);
		ELSE
			RAISE NO_DATA_FOUND;
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('NO DATA');
			
		WHEN OTHERS THEN
			DBMS_OUTPUT.PUT_LINE('SOME OTHER');
			
		
	END;

=====================================================
ASSIGNMENT DAY 4-1:-

 CREATE OR REPLACE PROCEDURE U_Q_E(P_MYENO IN INT,P_MYJOB OUT VARCHAR2,P_MYSAL OUT NUMBER)
    AS
    BEGIN
    	SELECT JOB INTO P_MYJOB FROM EMP WHERE EMPNO=P_MYENO;
    	SELECT SAL INTO P_MYSAL FROM EMP WHERE EMPNO=P_MYENO;
  
    EXCEPTION
    	WHEN NO_DATA_FOUND THEN
    	DBMS_OUTPUT.PUT_LINE('NO DATA');
   END;
    /
VARIABLE J VARCHAR2(20);
VARIABLE S NUMBER;
DECLARE
	J VARCHAR2(20);
	S NUMBER;
	ID INT:=&ID;
	BEGIN
		U_Q_E(ID,:J,:S);
		
	END;

PRINT :J;
PRINT :S;

============================================================
ASSIGNMENT DAY 4-4:-
CREATE OR REPLACE PROCEDURE SHOW_RECORDS(P_JOIN_DATE DATE)
AS
CURSOR EDATA IS SELECT ENAME,JOB,SAL,DEPTNO FROM EMP WHERE HIREDATE>P_JOIN_DATE;
INFO EDATA%ROWTYPE;
COUNTING INT;
BEGIN
	SELECT COUNT(ENAME) INTO COUNTING FROM EMP WHERE HIREDATE>P_JOIN_DATE;
	IF COUNTING>=1 THEN	
		DBMS_OUTPUT.PUT_LINE('EMPLOYEE FIRST NAME'||CHR(9)||CHR(9)||'JOB'||CHR(9)||CHR(9)||'SALARY'||CHR(9)||CHR(9)||'DEPARTMENT');
		DBMS_OUTPUT.PUT_LINE('_____________________________________________________________');
	OPEN EDATA;
		LOOP	
			FETCH EDATA INTO INFO;
			EXIT WHEN EDATA%NOTFOUND;
			DBMS_OUTPUT.PUT_LINE(INFO.ENAME||CHR(9)||CHR(9)||INFO.JOB||CHR(9)||CHR(9)||INFO.SAL||CHR(9)||CHR(9)||INFO.DEPTNO);
			
		END LOOP;
	CLOSE EDATA;
	ELSE
		RAISE NO_DATA_FOUND;
	END IF;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
	DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
END;

DECLARE
BEGIN
	SHOW_RECORDS(TO_DATE('01-01-1980','DD-MM-YYYY'));
END;

==========================================================
ASSIGNMENT DAY 4-5:-
CREATE OR REPLACE PROCEDURE ADD_EMPLOYEE(JOB VARCHAR2,MID NUMBER,HDATE DATE,SALARY NUMBER,DID NUMBER)
AS
EID INT;
M INT;
CNT INT;
COUNTING INT;
	BEGIN
		SELECT MAX(EMPNO) INTO M FROM EMP;
		EID:=M+1;
		INSERT INTO EMP(EMPNO) VALUES(EID);
		IF JOB IN ('PROGRAMMER','ACCOUNTANT','PUBLIC_ACCOUNTANT') THEN
			INSERT INTO EMP(JOB) VALUES(JOB);
		END IF;
		SELECT COUNT(EMPNO) INTO COUNTING FROM EMP WHERE EMPNO=MID;
		IF COUNTING>=1 THEN
			INSERT INTO EMP(MGR) VALUES(MID);
		ELSE
			DBMS_OUTPUT.PUT_LINE('EMPLOYEE DOESNT EXIST');
		END IF;
		IF TO_CHAR(HDATE,'DD-MM-YYYY')<SYSDATE THEN
			INSERT INTO EMP(HIREDATE) VALUES(HDATE);
		END IF;
		IF SALARY>800 THEN
			INSERT INTO EMP(SAL) VALUES(SALARY);
		END IF;
		SELECT COUNT(DEPTNO) INTO CNT FROM DEPT WHERE DEPTNO=DID;
		IF CNT>=1 THEN
			INSERT INTO EMP(EMP.DEPTNO) VALUES(DID);
		END IF;
	END;

DECLARE
    BEGIN
        ADD_EMPLOYEE('PROGRAMMER',7788,TO_DATE('04-04-2017','DD-MM-YYYY'),1200,10);
    END;
    /
	

===============================================================
ASSIGNMENT DAY 4-6:-
		 	
CREATE OR REPLACE PROCEDURE Gen_Bill(CID NUMBER,AMT NUMBER,BD DATE DEFAULT SYSDATE)
AS
TEMP NUMBER;
M NUMBER;	
	BEGIN
		SELECT MAX(BILLID) INTO M FROM BILL;
		TEMP:=M+1;
		IF (AMT<12000) THEN
			
				INSERT INTO BILL VALUES(CID,AMT,BD,TEMP);
				DBMS_OUTPUT.PUT_LINE('ONE ROW INSERTED');
			
		ELSE
				DBMS_OUTPUT.PUT_LINE('NOT IN 1');
		END IF;
	END;

================================================================
PACKAGES:-
1.) DEFINITION OF WHAT THE PACKAGE CONTAINS.
	IT MEANS DECLARING THE CONTENTS OF PACKAGE.
	MENTIONING THE SIGNATURE OF PROCEDURE OR FUNCTION.
2.) DEFINING THE BODY OF FUNCTIONS AND PROCEDURES BELONGING TO PACKAGE.

FUNCTION OR PROCEDURE IS TO BE CALLED , THAT BELONGING TO PACKAGE, WE MUST MENTION PACKAGE NAME FOLLOWED BY PROCEDURE OR FUNCTION NAME.
	
CREATE OR REPLACE PACKAGE ICECREAM
IS
	FUNCTION SNOWFALL(DEPT IN NUMBER) RETURN NUMBER;
	FUNCTION SNOW(DELL IN VARCHAR2) RETURN NUMBER;
END ICECREAM;
/

CREATE OR REPLACE PACKAGE BODY ICECREAM
IS
FUNCTION SNOWFALL(DEPT IN NUMBER) RETURN NUMBER
IS
	DD INT;
	BEGIN
		DD:=DEPT+100;
		RETURN DD;
	END SNOWFALL;

FUNCTION SNOW(DELL IN VARCHAR2) RETURN NUMBER
IS
	BEGIN
		DBMS_OUTPUT.PUT_LINE(DELL);
		RETURN 1000;
	END SNOW;
END ICECREAM;

EXEC DBMS_OUTPUT.PUT_LINE(ICECREAM.SNOWFALL(50));
EXEC DBMS_OUTPUT.PUT_LINE(ICECREAM.SNOW('HELLO'));

=================================================================
PACKAGE EXAMPLE:-
CREATE A PACKAGE HAVING 2 PROCEDURES AND A FUNCTION.

PROCEDURE SHOULD BE DESIGNED TO FIND DEPARTMENT HAVING HIGHEST NUMBER OF EMPLOYEES.

PROCEDURE SHOULD BE DESIGNED TO GIVE RAISE
MANAGER 3%
CLERK 10% AND OTHER 7.5%

FUNCTION TO CHECK THE EXISTENCE OF THE EMPLOYEE WHOSE BASIC IS TO BE RAISED.



ANS.)

CREATE OR REPLACE PACKAGE DEPTR
IS
	PROCEDURE HIGHEST;
	PROCEDURE RAISE(EMNO1 NUMBER);
	FUNCTION CHECKEMPNO(EMNO NUMBER) RETURN NUMBER ;
END DEPTR;
/

CREATE OR REPLACE PACKAGE BODY DEPTR
IS

PROCEDURE HIGHEST 
IS
	DATA VARCHAR2(4000);
	BEGIN
		 SELECT DEPTNO INTO DATA FROM (SELECT DEPTNO,COUNT(EMPNO) C FROM EMP12 GROUP BY DEPTNO ORDER BY C DESC) WHERE ROWNUM=1   ;
		 DBMS_OUTPUT.PUT_LINE(DATA);
END HIGHEST;

FUNCTION CHECKEMPNO(EMNO NUMBER) RETURN NUMBER 
IS
	CONT INT;
	BEGIN
	SELECT COUNT(EMPNO) INTO CONT FROM EMP12 WHERE EMPNO=EMNO;
		IF(CONT>=1) THEN
			DBMS_OUTPUT.PUT_LINE('EMPLOYEE EXISTS');
			RETURN 1;
		ELSE
			DBMS_OUTPUT.PUT_LINE('EMPLOYEE DOESNT EXISTS');
			RETURN 0;
		END IF;
	
END CHECKEMPNO;

PROCEDURE RAISE(EMNO1 NUMBER)
IS
	CURSOR C_EMP IS SELECT * FROM EMP12 WHERE EMPNO=EMNO1;
	INFO C_EMP%ROWTYPE;
	CALL NUMBER;
	BEGIN
		OPEN C_EMP;
		FETCH C_EMP INTO INFO;
		CALL:=CHECKEMPNO(EMNO1);
		IF CALL=1 THEN
			IF INFO.JOB='CLERK' THEN
				UPDATE EMP12
				SET SAL=SAL+(SAL*0.1)
				WHERE EMPNO=EMNO1;			
			ELSIF INFO.JOB='MANAGER' THEN
				UPDATE EMP12
				SET SAL=SAL+(SAL*0.03)
				WHERE EMPNO=EMNO1;
			ELSE
				UPDATE EMP12
				SET SAL=SAL+(SAL*0.075)
				WHERE EMPNO=EMNO1;
			END IF;
		
			
		END IF;
		CLOSE C_EMP;	
END RAISE;
												  
END DEPTR;
/			

EXEC DEPTR.HIGHEST;
EXEC DBMS_OUTPUT.PUT_LINE(DEPTR.CHECKEMPNO(7000));
EXEC DEPTR.RAISE(7788);

=======================================================================

CREATE OR REPLACE PACKAGE ICECREAM
AS
	CURSOR EMP_CURSOR IS SELECT * FROM EMP;
	CNT INT;
	PROCEDURE TEST_EX(A INT);
	FUNCTION CALCULATE(A INT) RETURN NUMBER;
END;
/

CREATE OR REPLACE PACKAGE BODY ICECREAM
IS
PROCEDURE TEST_EX(A INT)
AS
	EMPREC EMP%ROWTYPE;
	BEGIN
		OPEN EMP_CURSOR;
		LOOP
		FETCH EMP_CURSOR INTO EMPREC;
		EXIT WHEN EMP_CURSOR%NOTFOUND;
		IF(EMPREC.DEPTNO=A) THEN
		DBMS_OUTPUT.PUT_LINE(EMPREC.EMPNO||' '||EMPREC.ENAME);
		END IF;
		END LOOP;
		CLOSE EMP_CURSOR;
	
	END TEST_EX;

FUNCTION CALCULATE(A INT) RETURN NUMBER
AS
	BEGIN
		RETURN A*A;
	
END;
END ICECREAM;

======================================================================
ASSIGNMENT DAY 5-1:-

CREATE OR REPLACE PACKAGE M_E_P
IS
	PROCEDURE HIRE_EMP(EMNO NUMBER,ENAME VARCHAR2,DEPTNO NUMBER,JOB VARCHAR2,MGR NUMBER,SAL NUMBER,COMM NUMBER,HIREDATE DATE DEFAULT SYSDATE);
	PROCEDURE FIRE_EMP(EMNO NUMBER);
	INSERT_CNT NUMBER DEFAULT 0;
	DELETE_CNT NUMBER DEFAULT 0;
END;

CREATE OR REPLACE PACKAGE BODY M_E_P
IS
	FUNCTION CHECKEMPNO(EMNO NUMBER) RETURN NUMBER 
IS
	CONT INT;
	BEGIN
	SELECT COUNT(EMPNO) INTO CONT FROM EMP12 WHERE EMPNO=EMNO;
		IF(CONT>=1) THEN
			DBMS_OUTPUT.PUT_LINE('EMPLOYEE EXISTS');
			RETURN 1;
		ELSE
			DBMS_OUTPUT.PUT_LINE('EMPLOYEE DOESNT EXISTS');
			RETURN 0;
		END IF;
	
END CHECKEMPNO;

	PROCEDURE HIRE_EMP(EMNO NUMBER,ENAME VARCHAR2,DEPTNO NUMBER,JOB VARCHAR2,MGR NUMBER,SAL NUMBER,COMM NUMBER,HIREDATE DATE DEFAULT SYSDATE)
	IS
	CALL INT;
		BEGIN
			CALL:=CHECKEMPNO(EMNO);
			IF CALL=1 THEN
				DBMS_OUTPUT.PUT_LINE('EMPLOYEE EXISTS');
			ELSE
				INSERT INTO EMP12(EMPNO,ENAME,DEPTNO,JOB,MGR,HIREDATE,SAL,COMM) VALUES (EMNO,ENAME,DEPTNO,JOB,MGR,HIREDATE,SAL,COMM);
				DBMS_OUTPUT.PUT_LINE('ONE EMPLOYEE ADDED');
				INSERT_CNT:=INSERT_CNT+1;
				DBMS_OUTPUT.PUT_LINE('NO. OF EMP. HIRED= '||INSERT_CNT);
			END IF;
		END HIRE_EMP;

	PROCEDURE FIRE_EMP(EMNO NUMBER)
	IS 
	CALL INT;
		BEGIN
			CALL:=CHECKEMPNO(EMNO);
			IF CALL=1 THEN
				DBMS_OUTPUT.PUT_LINE('EMPLOYEE EXISTS');
				DELETE FROM EMP12 WHERE EMPNO=EMNO;
				DBMS_OUTPUT.PUT_LINE('DELETED');
				DELETE_CNT:=DELETE_CNT+1;
				DBMS_OUTPUT.PUT_LINE('NO. OF EMP FIRED= '||DELETE_CNT);
			ELSE
				DBMS_OUTPUT.PUT_LINE('EMPLOYEE DOESNT EXISTS');
			END IF;
		END FIRE_EMP;
END M_E_P;




==============================================================
ASSIGNMENT DAY 5-2:-

CREATE OR REPLACE PACKAGE M_E_P
IS
	FUNCTION GET_AVG_SAL(ENM VARCHAR2) RETURN NUMBER;
	FUNCTION GET_AVG_SAL(EID NUMBER) RETURN NUMBER;
END M_E_P;
	


CREATE OR REPLACE PACKAGE BODY M_E_P
IS
	FUNCTION GET_AVG_SAL(ENM VARCHAR2) RETURN NUMBER
	IS
		DATA NUMBER;
		BEGIN
			SELECT AVG(SAL) INTO DATA FROM EMP12 WHERE DEPTNO=(SELECT DEPTNO FROM EMP12 WHERE ENAME=ENM);
			RETURN DATA;
		
	END GET_AVG_SAL;




	FUNCTION GET_AVG_SAL(EID NUMBER) RETURN NUMBER
	IS
		DATA NUMBER;
		BEGIN
			SELECT AVG(SAL) INTO DATA FROM EMP12 WHERE DEPTNO=(SELECT DEPTNO FROM EMP12 WHERE EMPNO=EID);
			RETURN DATA;
		
	END GET_AVG_SAL;
END M_E_P;



==================================================================
ASSIGNMENT DAY 5-3:-

CREATE OR REPLACE PACKAGE P 
IS
	PROCEDURE DISPLAY_PLAN;
END P;
/


CREATE OR REPLACE PACKAGE BODY P
IS
	FUNCTION FIND_PLAN RETURN NUMBER
		IS
		DATA INT;
			BEGIN
				SELECT PLAN_ID INTO DATA FROM (SELECT PLAN_ID,COUNT(PLAN_ID) C FROM CUSTOMERS GROUP BY PLAN_ID ORDER BY C DESC) WHERE ROWNUM=1; 	
				DBMS_OUTPUT.PUT_LINE('MAX PLAN ID SUBSCRIBED BY CUSTOMERS IS= '||DATA);
				RETURN DATA;

			END FIND_PLAN;

	PROCEDURE DISPLAY_PLAN
	IS
		CALL NUMBER;
		DATA1 VARCHAR2(20);
		DATA2 VARCHAR2(20);
		BEGIN
			CALL:=FIND_PLAN;
			
				SELECT PLAN_NAME,SERVICE_NAME INTO DATA1,DATA2 FROM PLANS A JOIN SERVICES B ON A.SERVICE_ID=B.SERVICE_ID WHERE PLAN_ID=CALL;
				DBMS_OUTPUT.PUT_LINE('PLAN NAME IS= '||DATA1);
				DBMS_OUTPUT.PUT_LINE('SERVICE NAME IS= '||DATA2);
			END DISPLAY_PLAN;
END P;


EXEC P.DISPLAY_PLAN;

=================================================================
ASSIGNMENT DAY 5-5:-

CREATE OR REPLACE PACKAGE MOVIE_PACK
IS
	PROCEDURE PRNEWMOVIE(MN VARCHAR2,LANG VARCHAR2,GEN VARCHAR2,DUR NUMBER,DOR DATE);
END MOVIE_PACK;
/

CREATE OR REPLACE PACKAGE BODY MOVIE_PACK
IS
	FUNCTION GMID RETURN VARCHAR2
	IS
		DATA VARCHAR2(400);
		NI VARCHAR2(400);
		BEGIN
			SELECT SUBSTR(MAX(MOVIE_ID),4,5) INTO DATA FROM MOVIE_DETAILS; 
			NI:=DATA+1;
			RETURN NI;
		END GMID;

	
	PROCEDURE PRNEWMOVIE(MN VARCHAR2,LANG VARCHAR2,GEN VARCHAR2,DUR NUMBER,DOR DATE)
	IS
		CALL VARCHAR2(400);
		BEGIN
			CALL:=GMID;
			INSERT INTO MOVIE_DETAILS(MOVIE_ID,MOVIE_NAME,LANGUAGE,GENRE,DURATION,DATE_OF_RELEASE) VALUES (CONCAT('Mov',CALL),MN,LANG,GEN,DUR,DOR);
			DBMS_OUTPUT.PUT_LINE('NEW ROW INSERTED');
		END PRNEWMOVIE;
END MOVIE_PACK;	
=======================================================================
ASSIGNMENT DAY 5-4:-

CREATE OR REPLACE PACKAGE PKGDISPLAY_DETAILS
IS
	FUNCTION FNDISPLAYSTATUS(P_ID VARCHAR2) RETURN VARCHAR2;
	PROCEDURE PRDISPCOUNT(P_A_ID VARCHAR2,STA VARCHAR2);
END PKGDISPLAY_DETAILS;
/


CREATE OR REPLACE PACKAGE BODY PKGDISPLAY_DETAILS
IS
	FUNCTION FNDISPLAYSTATUS(P_ID VARCHAR2) RETURN VARCHAR2
	IS
		ST VARCHAR2(20);		
		BEGIN
			SELECT STATUS INTO ST FROM PUBLICATIONS WHERE PAPER_ID=P_ID;
			DBMS_OUTPUT.PUT_LINE('STATUS IS : '||ST);
			RETURN ST;
		END FNDISPLAYSTATUS;


		
	PROCEDURE PRDISPCOUNT(P_A_ID VARCHAR2,STA VARCHAR2)
	IS
		NP NUMBER;
		BEGIN
			SELECT NO_OF_PAGES INTO NP FROM PUBLICATIONS WHERE PRI_AUTHR_ID=P_A_ID AND STATUS=STA;
			DBMS_OUTPUT.PUT_LINE('NO. OF PAGES : '||NP);
		END PRDISPCOUNT;
END PKGDISPLAY_DETAILS;		



DECLARE
	ANS VARCHAR2(20);
	ANS1 NUMBER;
	BEGIN
		ANS:=PKGDISPLAY_DETAILS.FNDISPLAYSTATUS('P004');
		
		PKGDISPLAY_DETAILS.PRDISPCOUNT('A001','Accepted'); 
		
	END;
		

=======================================================================
OBJECT:-

CREATE TYPE FRUIT AS OBJECT(
PLACE VARCHAR2(20),
PERISHABLE CHAR(1)
);
/


DECLARE
F1 FRUIT;

BEGIN
	F1:=FRUIT('SAMPLE','Y');
	DBMS_OUTPUT.PUT_LINE(F1.PLACE||' '||F1.PERISHABLE);
END;
/



EXAMPLE:-

CREATE TYPE GAMES AS OBJECT(
GAME_ID VARCHAR2(20),
GAME_NAME VARCHAR2(20)
);
/


DECLARE
G1 GAMES;

BEGIN
	G1:=GAMES('G101','BASKETBALL');
	DBMS_OUTPUT.PUT_LINE(G1.GAME_ID||' '||G1.GAME_NAME);
END;
/	

EXAMPLE TO MAKE OBJECT AS PART OF TABLE:-

CREATE TYPE FRUITY AS OBJECT(
	PLACE VARCHAR2(20),
	SUPPLIED CHAR(1)
);
/


CREATE TABLE TF(ID INT,CNAME VARCHAR2(20),DATA FRUITY);

INSERT INTO TF VALUES(1,'SAM',FRUITY('PUNE','Y'));
INSERT INTO TF VALUES(2,'SAM1',FRUITY('NAGPUR','Z'));

SELECT C.DATA.PLACE,C.DATA.SUPPLIED FROM TF C WHERE C.ID=1;


==================================================================
ASSIGNMENT DAY 6-1:-

CREATE TYPE MARKS_TYPE AS OBJECT(
	SUBJECT VARCHAR2(25),
	MIDTERMMARKS NUMBER(3),
	ANNUALMARKS NUMBER(3)
);
/


CREATE TABLE MYMARKS(DATA MARKS_TYPE);

INSERT INTO MYMARKS VALUES(MARKS_TYPE('MATHS',100,100));

SELECT C.DATA.SUBJECT,C.DATA.MIDTERMMARKS,C.DATA.ANNUALMARKS FROM MYMARKS C;

=================================================================
VARRAY:-

GROUP OF SINGLE DATATYPE.

CREATE OR REPLACE TYPE <NAME OF VARRAY> IS VARRAY (SIZE) OF <DATA TYPE>;

EXAMPLE:-

CREATE OR REPLACE TYPE SAUCE IS VARRAY(3) OF INT;/

CREATE TABLE TP(ID INT,DATA SAUCE);

INSERT INTO TP VALUES(11,SAUCE(10,20));

INSERT INTO TP VALUES(12,SAUCE(10,20,30));


INSERT INTO TP VALUES(13,SAUCE(10));



SELECT * FROM TABLE(SELECT C.DATA FROM TP C WHERE C.ID=11);

 SELECT COUNT(*) FROM TABLE(SELECT C.DATA FROM TP C WHERE C.ID=11);



====================================================================
COMBINATION OF OBJECT AND VARRAY:-


CREATE TYPE HELLO AS OBJECT(
	H1 VARCHAR(20),
	H2 NUMBER(3),
	H3 NUMBER(3)
);
/


CREATE OR REPLACE TYPE HELLO1 IS VARRAY(3) OF HELLO;
/



CREATE TABLE HELLO3(DATA HELLO1);

INSERT INTO HELLO3 VALUES(HELLO1(HELLO('XYZ',11,11)));

INSERT INTO HELLO3 VALUES(HELLO1(HELLO('ABC',12,2),HELLO('PQR',12,13)));

SELECT * FROM TABLE(SELECT  C.DATA.HELLO.H1 FROM HELLO3 C);

=====================================================================
NESTED TABLE:-

CREATE TYPE JAM2 AS OBJECT(
	COMP_NAME VARCHAR2(20),
	COLOR VARCHAR2(20));
/

CREATE TYPE JAMTYPE1 AS TABLE OF JAM2;
/

CREATE TABLE M2(
	ID INT,
	LOCN VARCHAR2(20),
	FOOD1 JAMTYPE1)
NESTED TABLE FOOD1 STORE AS JAMS1;

INSERT INTO M2 VALUES(11,'GUJARAT',JAMTYPE1(JAM2('NESTLE','RED'),JAM2('KISSAN','YELLOW')));

INSERT INTO M2 VALUES(11,'GUJARAT',JAMTYPE1(JAM2('MK','RED'),JAM2('BI','YELLOW')));

SELECT C.ID, C.LOCN, T.COMP_NAME FROM M2 C,TABLE (C.FOOD1) T;


UPDATE TABLE(SELECT FOOD1 FROM M2 WHERE ID=11) SET COLOR='BLUE' WHERE COMP_NAME='NESTLE';



=====================================================================
ASSIGNMENT DAY 5-6:-

CREATE OR REPLACE PACKAGE PKJ_TRANSPORTS
IS
	ROUTE_NOT_FOUND EXCEPTION;
	PROCEDURE SHOW_DETAILS(RNO VARCHAR2);
END PKJ_TRANSPORTS;
/


CREATE OR REPLACE PACKAGE BODY PKJ_TRANSPORTS
IS
	PROCEDURE SHOW_DETAILS(RNO VARCHAR2)
	IS
		CNT INT;
		SID VARCHAR2(5);
		CURSOR C_DATA IS SELECT SCHEDULE_ID FROM SCHEDULE WHERE ROUTE_NO=RNO;
		INFO C_DATA%ROWTYPE;
		BEGIN
			OPEN C_DATA;
			SELECT COUNT(ROUTENO) INTO CNT FROM ROUTE WHERE ROUTENO=RNO;
			IF CNT>=1 THEN
			LOOP
				FETCH C_DATA INTO INFO;
				EXIT WHEN C_DATA%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(INFO.SCHEDULE_ID);
			END LOOP;
			ELSE
				RAISE ROUTE_NOT_FOUND;
			END IF;
			CLOSE C_DATA;
		EXCEPTION
			WHEN ROUTE_NOT_FOUND THEN
				DBMS_OUTPUT.PUT_LINE('ERROR CODE:-20000 ERROR MESSAGE: INVALID ROUTE NUMBER');
			WHEN OTHERS THEN
				DBMS_OUTPUT.PUT_LINE('SOME OTHER ERROR');


		
		END SHOW_DETAILS;
END PKJ_TRANSPORTS;
/


DECLARE
	BEGIN
		PKJ_TRANSPORTS.SHOW_DETAILS('r002');
	END;

===============================================================================
ASSIGNMENT DAY 6-3:-

CREATE TYPE ICECREAM_TYPE AS OBJECT(
	FLAVOURNO NUMBER(2),
	FNAME VARCHAR2(10),
	COST NUMBER(3),
	HASTOPPING CHAR(1)
);


CREATE TABLE MENU (MENUNO NUMBER(2) PRIMARY KEY, MAINCOURSE VARCHAR2(15) NOT NULL, DESERT ICECREAM_TYPE, COLD_DRINK CHAR(6));


INSERT INTO MENU VALUES (1,'XYZ',ICECREAM_TYPE(4,'VAN',100,'Y'),'PQR');

INSERT INTO MENU VALUES (2,'ABC',ICECREAM_TYPE(3,'CHOC',100,'Y'),'MNO');


SELECT C.DESERT.FNAME,C.DESERT.COST FROM MENU C WHERE C.DESERT.FLAVOURNO=2;


UPDATE MENU C
SET C.DESERT.COST=100,
    C.MAINCOURSE='XYZ'
WHERE C.MENUNO=1;

SELECT C.MENUNO,C.MAINCOURSE,C.DESERT.COST FROM MENU C WHERE C.MENUNO=1;

================================================================================
RAISE_APPLICATION_ERROR:-

DECLARE
	VID INT;
	BEGIN
		VID:= &UID;
		IF(VID<18) THEN
			RAISE_APPLICATION_ERROR(-20001,'AGE SHOULD BE MORE THAN 18');
		END IF;
	EXCEPTION
		WHEN OTHERS THEN
			IF SQLCODE=-20001 THEN
				DBMS_OUTPUT.PUT_LINE(SQLERRM);
			END IF;
	END;
/

================================================================================
PRAGMA EXCEPTION:-
IS USED TO ASSIGN CODE TO USER DEFINED EXCEPTION.

DECLARE
	INVALID_AGE EXCEPTION;
	VID INT;
	PRAGMA EXCEPTION_INIT(INVALID_AGE,-45000);
		BEGIN
			VID := &UID;
			IF(VID<18) THEN
				RAISE INVALID_AGE;
			END IF;
	EXCEPTION
		WHEN OTHERS THEN
			IF (SQLCODE=-45000) THEN
				DBMS_OUTPUT.PUT_LINE('AGE BELOW 18');
			END IF;
END;


=================================================================================
TRIGGERS:-

CREATE OR REPLACE TRIGGER TRG_1
BEFORE INSERT ON EMPTMP1
BEGIN
	DBMS_OUTPUT.PUT_LINE('TRIGGER GOT EXECUTED');
END;
/

INSERT INTO EMPTMP1 VALUES (12,'FAIRY',8000);


=================================================================================
PSEUDO COLUMNS:-
:NEW
:OLD

DROP TRIGGER TRG_1;

CREATE OR REPLACE TRIGGER TRG_1
AFTER UPDATE ON EMPTMP1 FOR EACH ROW
BEGIN
	INSERT INTO EMPTMP12 VALUES (:OLD.DEPTNO,:OLD.ENAME,:OLD.SAL);	
	DBMS_OUTPUT.PUT_LINE('OLD RECORDS STORED IN TEMP TABLE');
END;
/


=================================================================================
PRACTICE PAPER 1:-
=========================================================================
Q1.) 
=========================================================================
CREATE OR REPLACE PACKAGE PKG_SAL
IS
	PROCEDURE SHOW_SAL(ENO NUMBER);
END PKG_SAL;

CREATE OR REPLACE PACKAGE BODY PKG_SAL
IS
	FUNCTION SAL_CALC(ENO NUMBER) RETURN NUMBER
	IS
		CNT INT;
			BEGIN
			SELECT COUNT(ENAME) INTO CNT FROM EMP WHERE EMPNO=ENO;
			IF CNT>=1 THEN
				DBMS_OUTPUT.PUT_LINE('EMPLOYEE EXIST');
				RETURN 1;
			ELSE
				DBMS_OUTPUT.PUT_LINE('EMPLOYEE DOESNT EXIST');
				RETURN 0;
			END IF;
			END SAL_CALC;


	PROCEDURE SHOW_SAL(ENO NUMBER)
	IS
		CALL NUMBER;
		ANS NUMBER;
		ANS1 NUMBER;
		NAME VARCHAR2(20);

			BEGIN
				CALL:=SAL_CALC(ENO);
				IF CALL=1 THEN
					SELECT AVG(SAL) INTO ANS FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE EMPNO=ENO);
					SELECT SUM(SAL) INTO ANS1 FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE EMPNO=ENO);	
					SELECT ENAME INTO NAME FROM EMP WHERE EMPNO=ENO;
					DBMS_OUTPUT.PUT_LINE('EMPLOYEE NUMBER: '||ENO);
					DBMS_OUTPUT.PUT_LINE('EMPLOYEE NAME: '||NAME);
					DBMS_OUTPUT.PUT_LINE('TOTAL SALARY: '||ANS1);
					DBMS_OUTPUT.PUT_LINE('AVERAGE SALARY: '||ANS);
				ELSE
					DBMS_OUTPUT.PUT_LINE('EXCEPTION');
				END IF;
			END SHOW_SAL;
END PKG_SAL;

======================================================================
Q2.)
======================================================================
CREATE OR REPLACE PROCEDURE SHOW_DETAILS(MR NUMBER)
AS
	CURSOR C_EMP IS SELECT EMPNO,ENAME,HIREDATE,NVL(COMM,0) N FROM EMP WHERE MGR=MR;
	INFO C_EMP%ROWTYPE;
	CNT INT;
	NAME VARCHAR2(20);
	DNO NUMBER;
	DN VARCHAR2(20);
		BEGIN
			SELECT COUNT(ENAME) INTO CNT FROM EMP WHERE MGR=MR;
			IF(CNT>=1) THEN
				SELECT ENAME INTO NAME FROM EMP WHERE EMPNO=MR;		 
				SELECT DEPTNO INTO DNO FROM EMP WHERE EMPNO=MR;
				SELECT DNAME INTO DN FROM DEPT WHERE DEPTNO=DNO;
				DBMS_OUTPUT.PUT_LINE('MANAGER ID : '||MR);
				DBMS_OUTPUT.PUT_LINE('MANAGER NAME : '||NAME);		
				DBMS_OUTPUT.PUT_LINE('DEPARTMENT NAME : '||DN);
					DBMS_OUTPUT.PUT_LINE('EMPLOYEE ID'||CHR(9)||CHR(9)||'EMPLOYEE NAME'||CHR(9)||CHR(9)||'HIREDATE'||CHR(9)||CHR(9)||'COMMISSION');
				OPEN C_EMP;
					LOOP
						FETCH C_EMP INTO INFO;
						EXIT WHEN C_EMP%NOTFOUND;
							DBMS_OUTPUT.PUT_LINE(INFO.EMPNO||CHR(9)||CHR(9)||CHR(9)||INFO.ENAME||CHR(9)||CHR(9)||CHR(9)||INFO.HIREDATE||CHR(9)||CHR(9)||CHR(9)||INFO.N);
					END LOOP;
				CLOSE C_EMP;
			ELSE
					DBMS_OUTPUT.PUT_LINE('ENTERED ID IS NOT CORRECT');
			END IF;
		END;

/


==========================================================================
Q3.)
==========================================================================
CREATE OR REPLACE FUNCTION G_A_S(DNO NUMBER)
RETURN NUMBER
AS
	A_S NUMBER;
	CNT NUMBER;
	DN VARCHAR2(20);
	BEGIN
		SELECT COUNT(ENAME) INTO CNT FROM EMP WHERE DEPTNO=DNO;
		IF CNT>=1 THEN
			SELECT SUM(SAL*12) INTO A_S FROM EMP WHERE DEPTNO=DNO;
			SELECT DNAME INTO DN FROM DEPT WHERE DEPTNO=DNO;
			DBMS_OUTPUT.PUT_LINE('DEPT ID : '||DNO);
			DBMS_OUTPUT.PUT_LINE('DEPT NAME : '||DN);
			RETURN A_S;
		ELSE
			RAISE NO_DATA_FOUND;
		END IF;
	EXCEPTION
		WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('WRONG DNO');
	END;


DECLARE
	ANS INT;
		BEGIN
			ANS:=G_A_S(20);
			DBMS_OUTPUT.PUT_LINE('ANNUAL SALARY : '||ANS);
		END;

=======================================================================
Q4.)
=======================================================================
CREATE OR REPLACE PACKAGE P_S_D
IS
	PROCEDURE PREMPDETAILS(S NUMBER);
	PROCEDURE PREMPDETAILS(HDATE DATE);
END P_S_D;

CREATE OR REPLACE PACKAGE BODY P_S_D
IS
	PROCEDURE PREMPDETAILS(S NUMBER)
	IS
		CURSOR C_EMP IS SELECT EMPNO,ENAME,SAL,DEPTNO FROM EMP WHERE SAL<=S;
		INFO C_EMP%ROWTYPE;
		BEGIN
			OPEN C_EMP;
				LOOP
				FETCH C_EMP INTO INFO;
				EXIT WHEN C_EMP%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(INFO.EMPNO||' '||INFO.ENAME||' '||INFO.SAL||' '||INFO.DEPTNO);
				END LOOP;
			CLOSE C_EMP;
		END PREMPDETAILS;


	PROCEDURE PREMPDETAILS(HDATE DATE)
	IS
		CURSOR C_EMP IS SELECT EMPNO,ENAME,SAL,DEPTNO FROM EMP WHERE HIREDATE>=HDATE;
		INFO C_EMP%ROWTYPE;
		BEGIN
			OPEN C_EMP;
				LOOP
				FETCH C_EMP INTO INFO;
				EXIT WHEN C_EMP%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(INFO.EMPNO||' '||INFO.ENAME||' '||INFO.SAL||' '||INFO.DEPTNO);
				END LOOP;
			CLOSE C_EMP;
		END PREMPDETAILS;
END P_S_D;



DECLARE
	BEGIN
		P_S_D.PREMPDETAILS(3000);
	END;



EXEC P_S_D.PREMPDETAILS(TO_DATE('01-01-1982','DD-MM-YYYY'));



=================================================================================
PRACTICE PAPER 2:-
=========================================================================
Q1.) 
=========================================================================
CREATE OR REPLACE PACKAGE PKA_SAL
IS
	PROCEDURE SHOW_SAL(ENO NUMBER);
END PKA_SAL;


CREATE OR REPLACE PACKAGE BODY PKA_SAL
IS
	FUNCTION SAL_CALC(ENO NUMBER) RETURN NUMBER
	IS
		CNT NUMBER;
		BEGIN
		SELECT COUNT(EMPNO) INTO CNT FROM EMP WHERE EMPNO=ENO;
		IF  CNT>=1 THEN
			DBMS_OUTPUT.PUT_LINE('EMPLOYEE EXISTS');
			RETURN 1;
		ELSE
			DBMS_OUTPUT.PUT_LINE('EMPLOYEE DOESNT EXISTS');
			RETURN 0;
		END IF;
	END SAL_CALC;



	PROCEDURE SHOW_SAL(ENO NUMBER)
	IS
		CALL NUMBER;
		NAME VARCHAR2(20);
		DNO NUMBER;
		ANS1 NUMBER;
		ANS2 NUMBER;
		ANS3 NUMBER;
		ANS4 NUMBER;
			BEGIN
				CALL:=SAL_CALC(ENO);
				IF CALL=1 THEN
					SELECT ENAME INTO NAME FROM EMP WHERE EMPNO=ENO;
					SELECT DEPTNO INTO DNO FROM EMP WHERE EMPNO=ENO;
					SELECT SUM(SAL) INTO ANS1 FROM EMP WHERE DEPTNO=DNO;  		
					SELECT AVG(SAL) INTO ANS2 FROM EMP WHERE DEPTNO=DNO;
					SELECT MIN(SAL) INTO ANS3 FROM EMP WHERE DEPTNO=DNO;
					SELECT MAX(SAL) INTO ANS4 FROM EMP WHERE DEPTNO=DNO;
					DBMS_OUTPUT.PUT_LINE('==================================================');
					DBMS_OUTPUT.PUT_LINE('EMPLOYEE NUMBER : '||ENO||CHR(9)||CHR(9)||'NAME OF EMPLOYEE : '||NAME);
					DBMS_OUTPUT.PUT_LINE('DEPARTMENT NUMBER : '||DNO);
					DBMS_OUTPUT.PUT_LINE('==================================================');
					DBMS_OUTPUT.PUT_LINE('TOTAL SALARY PAID IN DEPARTMENT : '||ANS1);
					DBMS_OUTPUT.PUT_LINE('AVERAGE SALARY PAID IN DEPARTMENT : '||ANS2);
					DBMS_OUTPUT.PUT_LINE('MINIMUM SALARY PAID IN DEPARTMENT : '||ANS3);
					DBMS_OUTPUT.PUT_LINE('MAXIMUM SALARY PAID IN DEPARTMENT : '||ANS4);
					DBMS_OUTPUT.PUT_LINE('==================================================');
				ELSE
					RAISE NO_DATA_FOUND;
				END IF;

			EXCEPTION
				WHEN NO_DATA_FOUND THEN
					DBMS_OUTPUT.PUT_LINE('EMPNO DOESNT EXISTS');
		END SHOW_SAL;
END PKA_SAL;


=========================================================================
Q5.) 
=========================================================================

CREATE OR REPLACE TYPE B_D AS OBJECT(
	ORDER_ID NUMBER,
	AMOUNT NUMBER
);

CREATE TYPE B_D5 AS TABLE OF B_D;

CREATE TABLE BOOK(
	BOOK_ID VARCHAR2(20) PRIMARY KEY,
	OD B_D5)
NESTED TABLE OD STORE AS B_D11;

INSERT INTO BOOK VALUES('B104',B_D5(B_D(1,2000)));
INSERT INTO BOOK VALUES('B102',B_D5(B_D(4,2500),B_D(7,3070)));
INSERT INTO BOOK VALUES('B103',B_D5(B_D(3,5850),B_D(2,7400)));


CREATE OR REPLACE PROCEDURE U_O (BOOK_C VARCHAR2,O_D NUMBER,AMT NUMBER)
AS
BEGIN
	

UPDATE TABLE (SELECT OD FROM BOOK WHERE BOOK_ID=BOOK_C) 
		SET ORDER_ID=O_D,
		    AMOUNT=10000
		WHERE ORDER_ID=5;


	UPDATE BOOK 
		SET BOOK_ID='B109'
		WHERE BOOK_ID=BOOK_C;

	
		    
	DBMS_OUTPUT.PUT_LINE('ONE ROW UPDATED');
END;




=================================================================================
PRACTICE PAPER 2 PL/SQL:-
=========================================================================
Q1.) 
=========================================================================
CREATE OR REPLACE PROCEDURE GEN_REP(ENO NUMBER)
AS
	CURSOR C_EMP1 IS SELECT ROWNUM,A.EMPNO C,A.ENAME D,B.ENAME E,A.DEPTNO F FROM EMP A JOIN EMP B ON A.MGR=B.EMPNO WHERE A.SAL<ENO;
	CURSOR C_EMP2 IS SELECT ROWNUM,A.EMPNO F,A.ENAME G,B.ENAME H,A.DEPTNO I FROM EMP A JOIN EMP B ON A.MGR=B.ENAME WHERE A.SAL>ENO;
	INFO1 C_EMP1%ROWTYPE;
	INFO2 C_EMP2%ROWTYPE;
	BEGIN
		
		OPEN C_EMP1;
			DBMS_OUTPUT.PUT_LINE('SRNO.'||CHR(9)||CHR(9)||'EMPNO'||CHR(9)||CHR(9)||'ENAME'||CHR(9)||CHR(9)||'MANAGER NAME'||CHR(9)||CHR(9)||'DEPTNO');
			LOOP
				FETCH C_EMP1 INTO INFO1;
				EXIT WHEN C_EMP1%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(INFO1.ROWNUM||CHR(9)||CHR(9)||INFO1.C||CHR(9)||CHR(9)||INFO1.D||CHR(9)||CHR(9)||INFO1.E||CHR(9)||CHR(9)||CHR(9)||INFO1.F);
							
			END LOOP;
		CLOSE C_EMP1;
	
		OPEN C_EMP2;
			DBMS_OUTPUT.PUT_LINE('SRNO.'||CHR(9)||CHR(9)||'EMPNO'||CHR(9)||CHR(9)||'ENAME'||CHR(9)||CHR(9)||'MANAGER NAME'||CHR(9)||CHR(9)||'DEPTNO');
			LOOP
				FETCH C_EMP2 INTO INFO2;
				EXIT WHEN C_EMP2%NOTFOUND;
				DBMS_OUTPUT.PUT_LINE(INFO2.ROWNUM||CHR(9)||CHR(9)||INFO2.F||CHR(9)||CHR(9)||INFO2.G||CHR(9)||CHR(9)||INFO2.H||CHR(9)||CHR(9)||CHR(9)||INFO2.I);
							
			END LOOP;
		CLOSE C_EMP2;
	
END;

==========================================================================
ASSIGNMENT DAY-6 COLLECTIONS:-
==========================================================================
PRACTICE-1 AND 3:-
==========================================================================
CREATE OR REPLACE TYPE SKILLS_TYPE AS OBJECT(
	SKILL_ID NUMBER(2),
	SKILL_NAME VARCHAR2(20),
	SKILL_RATING NUMBER(2)
);


CREATE TYPE SKILL_TAB_TYPE AS TABLE OF SKILLS_TYPE;


CREATE TABLE EMPMAIN(
	EMP_NO NUMBER(4) PRIMARY KEY,
	EMP_NAME CHAR(30),
	ALL_SKILLS SKILL_TAB_TYPE
)
NESTED TABLE ALL_SKILLS STORE AS A_S;


INSERT INTO EMPMAIN VALUES(1001,'AMAN DEV',SKILL_TAB_TYPE(SKILLS_TYPE(1,'DESIGN',9),SKILLS_TYPE(2,'CODE',10),SKILLS_TYPE(3,'TEST',8)));

INSERT INTO EMPMAIN VALUES(1002,'PS',SKILL_TAB_TYPE(SKILLS_TYPE(1,'A',9),SKILLS_TYPE(2,'B',10),SKILLS_TYPE(3,'C',8)));

INSERT INTO EMPMAIN VALUES(1003,'BN',SKILL_TAB_TYPE(SKILLS_TYPE(1,'D',9),SKILLS_TYPE(2,'E',10),SKILLS_TYPE(3,'F',8)));

INSERT INTO EMPMAIN VALUES(1004,'VS',SKILL_TAB_TYPE(SKILLS_TYPE(1,'G',9),SKILLS_TYPE(2,'H',10),SKILLS_TYPE(3,'I',8)));

INSERT INTO EMPMAIN VALUES(1005,'VV',SKILL_TAB_TYPE(SKILLS_TYPE(1,'G',9),SKILLS_TYPE(2,'H',10),SKILLS_TYPE(3,NULL,8)));


UPDATE TABLE (SELECT ALL_SKILLS FROM EMPMAIN WHERE EMP_NAME='AMAN DEV')
SET
	SKILL_RATING=9
WHERE SKILL_ID=3;

SELECT C.EMP_NO,C.EMP_NAME,T.SKILL_ID,T.SKILL_NAME,T.SKILL_RATING FROM EMPMAIN C,TABLE (C.ALL_SKILLS) T;

DELETE FROM TABLE(SELECT ALL_SKILLS FROM EMPMAIN WHERE EMP_NO=1005) WHERE SKILL_NAME IS NULL;

CREATE OR REPLACE PROCEDURE ADD_SKILL(ENO NUMBER,S_ID NUMBER,S_NAME VARCHAR2,S_RATING NUMBER)
AS

 	
		BEGIN
											
			INSERT INTO TABLE(SELECT ALL_SKILLS FROM EMPMAIN WHERE EMP_NO=ENO) VALUES (SKILLS_TYPE(S_ID,S_NAME,S_RATING));

		END;





============================================================================
PRACTICE-2:-
============================================================================
CREATE OR REPLACE TYPE CUST_TAB AS OBJECT(
	CUST_ID NUMBER,
	CUST_NAME VARCHAR2(20),
	PLAN_NAME VARCHAR2(20)
);


CREATE TYPE CUST_TAB_TYPE AS TABLE OF CUST_TAB; 


CREATE TABLE CUST_TAB_DETAILS(
	SRNO NUMBER(10) PRIMARY KEY,
	CUST_NUM NUMBER(10),
	CUST_INFO CUST_TAB_TYPE
)
	NESTED TABLE CUST_INFO STORE AS C_I;


INSERT INTO CUST_TAB_DETAILS VALUES (1,101,CUST_TAB_TYPE(CUST_TAB(20,'XYZ','ABC'),CUST_TAB(21,'PQR','MNO')));

INSERT INTO CUST_TAB_DETAILS VALUES (2,102,CUST_TAB_TYPE(CUST_TAB(23,'XYZ1','ABC1'),CUST_TAB(24,'PQR1','MNO1')));

SELECT C.SRNO,C.CUST_NUM,T.CUST_ID,T.CUST_NAME,T.PLAN_NAME FROM CUST_TAB_DETAILS C,TABLE(C.CUST_INFO) T;

=============================================================================
PRACTICE-4:-
=============================================================================
CREATE OR REPLACE TYPE VEHICLE_TYPE AS OBJECT(
	VEHICLE_NO VARCHAR2(12),
	VEHICLE_TYPE CHAR(1),
	MONTHLY_EXPENSE NUMBER(7)
);


CREATE TYPE VEHICLE_T AS TABLE OF VEHICLE_TYPE;	


CREATE TABLE EMP_MAIN(
	EMP_NO NUMBER(4) PRIMARY KEY,
	EMP_NAME VARCHAR2(30),
	VEHICLE_LIST VEHICLE_T
)
NESTED TABLE VEHICLE_LIST STORE AS V_L;


INSERT INTO EMP_MAIN VALUES(1,'HELLO',VEHICLE_T(VEHICLE_TYPE('MH12','T',1200),VEHICLE_TYPE('MH14','F',2400)));

INSERT INTO EMP_MAIN VALUES(2,'HELLO1',VEHICLE_T(VEHICLE_TYPE('MH13','T',1200),VEHICLE_TYPE('MH15','F',2400)));


CREATE OR REPLACE PROCEDURE ADD_VEHICLE_DETAILS(ENO NUMBER,V_NO VARCHAR2,V_TYPE CHAR,M_EXP NUMBER)
AS	
	BEGIN
		INSERT INTO TABLE(SELECT VEHICLE_LIST FROM EMP_MAIN WHERE EMP_NO=ENO) VALUES (VEHICLE_TYPE(V_NO,V_TYPE,M_EXP));
	END;	

DECLARE
       BEGIN
               ADD_VEHICLE_DETAILS(1,'MH34','F',25000);
    END;
    /


============================================================================
PRACTICE-5:-
============================================================================
CREATE OR REPLACE TYPE PAPER_OBJ AS OBJECT(
	PAPER_ID NUMBER,
	PAPER_NAME VARCHAR2(20),
	PUBLISH_DATE DATE
);


CREATE TYPE PAPER_DETAILS AS TABLE OF PAPER_OBJ;


CREATE TABLE AUTHOR_TAB(
	AUTHOR_ID NUMBER(10) PRIMARY KEY,
	AUTHOR_NAME VARCHAR2(20),
	PAPERS PAPER_DETAILS
)
NESTED TABLE PAPERS STORE AS P_P;


INSERT INTO AUTHOR_TAB VALUES (1,'ABC',PAPER_DETAILS(PAPER_OBJ(20,'XYZ',TO_DATE('01-01-2017','DD-MM-YYYY')),PAPER_OBJ(21,'PQR',TO_DATE('02-02-2016','DD-MM-YYYY'))));

SELECT C.AUTHOR_ID,T.PAPER_ID,T.PUBLISH_DATE FROM AUTHOR_TAB C,TABLE(C.PAPERS) T;

=============================================================================
PRACTICE-6:-
=============================================================================

CREATE OR REPLACE TYPE INCREMENT_TYPE AS OBJECT(
	INCR_ID NUMBER(3),
	INCR_DATE DATE,
	INCR_AMT NUMBER(7)
);


CREATE TABLE EMP_DETAIL(
	EMP_NO NUMBER(4),
	EMP_NAME CHAR(30),
	EMP_SKILLS SKILLS_TYPE,
	EMP_INCR INCREMENT_TYPE
);


INSERT INTO EMP_DETAIL VALUES(1,'ABC',SKILLS_TYPE(12,'DESIGN',4),INCREMENT_TYPE(1,TO_DATE('01-01-2017','DD-MM-YYYY'),1200));

INSERT INTO EMP_DETAIL VALUES(2,'ABC1',SKILLS_TYPE(13,'CODE',6),INCREMENT_TYPE(2,TO_DATE('02-02-2017','DD-MM-YYYY'),2400));


CREATE OR REPLACE PROCEDURE XYZ(ENO NUMBER)
AS
	CURSOR C_EMP IS SELECT C.EMP_NAME,C.EMP_SKILLS.SKILL_ID A,C.EMP_SKILLS.SKILL_NAME B,C.EMP_SKILLS.SKILL_RATING D,C.EMP_INCR.INCR_ID E,C.EMP_INCR.INCR_DATE F,C.EMP_INCR.INCR_AMT G FROM EMP_DETAIL C WHERE EMP_NO=ENO;
	INFO C_EMP%ROWTYPE;
	BEGIN
		OPEN C_EMP;
			FETCH C_EMP INTO INFO;
			DBMS_OUTPUT.PUT_LINE('EMPLOYEE NO : '||ENO||CHR(9)||CHR(9)||CHR(9)||'EMPLOYEE NAME : '||INFO.EMP_NAME);
			DBMS_OUTPUT.PUT_LINE('___________________________________________________');
			DBMS_OUTPUT.PUT_LINE('SKILL SET');
			DBMS_OUTPUT.PUT_LINE('SKILL ID : '||INFO.A||CHR(9)||CHR(9)||'SKILL NAME : '||INFO.B||CHR(9)||CHR(9)||'RATING : '||INFO.D);
			DBMS_OUTPUT.PUT_LINE('___________________________________________________');
			DBMS_OUTPUT.PUT_LINE('INCREMENT');
			DBMS_OUTPUT.PUT_LINE('INCREMENT ID : '||INFO.E||CHR(9)||CHR(9)||'INCREMENT DATE :'||INFO.F||CHR(9)||CHR(9)||'AMOUNT : '||INFO.G);
			DBMS_OUTPUT.PUT_LINE('___________________________________________________');	
		CLOSE C_EMP;
	END;


=========================================================================================





























